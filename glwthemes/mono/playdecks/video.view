$ui.showplaydeck =  $ui.menu ||
  $global.media.current.error ||
  $global.media.current.video.too_slow ||
  changed($global.media.current.audio.current, 2) ||
  changed($global.media.current.subtitle.current, 2) ||
  changed($global.media.current.metadata.title, 5) ||
  changed($global.media.current.seektime, 2, true) ||
  count($global.media.current.notifications);

// -------------------------------------------------------------------

widget(container_x, {
  .padding = [5, 0, 5, 5];
  
  .align = center;

  widget(backdrop, {
    .source = "theme://graphics/blackdrop.png";
    .border = [12,12,12,12];
    .alphaSelf = 0.66;
    .filterConstraintX = true;

    widget(container_x, {
      .spacing = 10;
      widget(container_y, {
	.filterConstraintX = true;
	widget(label, {
	  .sizeScale = 1.5;
	  .caption = $global.media.current.metadata.title;
	});

	widget(container_x, {
	  .hidden = select($global.media.current.error, false, true);
	  widget(icon, {
	    .source = "theme://svg/Alert.svg";
	  });
	  widget(label, {
	    .caption = $global.media.current.error;
	  });
	});

	widget(container_x, {
	  .hidden = select($global.media.current.video.too_slow, false, true);
	  widget(icon, {
	    .source = "theme://svg/Alert.svg";
	  });
	  widget(label, {
	    .caption = _("CPU is too slow to decode this video");
	  });
	});


	cloner($global.media.current.notifications, container_x, {
	  .spacing = 10;
	  widget(icon, {
	    .source = "theme://svg/Alert.svg";
	    .color = translate($self.type, [1,1,1],
			       "info", [0.5, 1, 0.5],
			       "warning",  [1, 1, 0.5],
			       "error", [1, 0.5, 0.5]);
	  });
	  
	  widget(label, {
	    .caption = $self.text;
	    .color = translate($self.type, [1,1,1],
			       "info", [0.5, 1, 0.5],
			       "warning",  [1, 1, 0.5],
			       "error", [1, 0.5, 0.5]);
	  });
	});

	widget(container_x, {
	  .spacing = 10;
	  .hidden = !changed($global.media.current.audio.current, 5);
	  widget(icon, {
	    .source = "theme://svg/Sound.svg";
	  });
	  widget(deck, {
	    .effect = flipHorizontal;
	    .time = 0.1;
	    cloner($global.media.current.metadata.audiostreams, label, {
	      .caption = join(" - ", $self.title, $self.language, $self.source, $self.longformat ?? $self.format);
	    });
	  });
	});

	widget(container_x, {
	  .spacing = 10;
	  .hidden = !changed($global.media.current.subtitle.current, 5);
	  widget(icon, {
	    .source = "theme://svg/Script.svg";
	  });
	  widget(deck, {
	    .effect = flipHorizontal;
	    .time = 0.1;
	    cloner($global.media.current.metadata.subtitlestreams, label, {
	      .caption = join(" - ", $self.title, $self.language, $self.source, $self.format);
	    });
	  });
	});
      });

      widget(container_y, {
	.align = bottom;

	widget(label, {
	  .align = right;
	  .caption = value2duration(ignoreTentative($global.media.current.currenttime)) + 
	    select($global.media.current.metadata.duration,
		   " / " + value2duration($global.media.current.metadata.duration), "");
	});
      });
    });
  });
});
