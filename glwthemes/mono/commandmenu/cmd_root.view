#import "skin://commandmenu.skin"
#import "theme://include/separators.view";

$view.videofeatures =
  $global.media.current.type == "video" ||
  $global.media.current.type == "tv";

$view.settingpage = 0;
$view.subtitlepage = 0;
$view.audiopage = 0;

onEvent(back, {
  $view.settingpage = 0;
}, $view.settingpage && $view.videofeatures);


widget(container_y, {

  .hidden = !$ui.menu;
  .padding = 5;

  .spacing = 10;
  .align = center;

  // -- clock and date -------------------------------------------------

  widget(container_x, {
    .height = $ui.size * 5;
    .align = right;
    .spacing = 5;

    commandGroup(widget(container_z, {
      .width = $ui.size * 4;
      widget(image, {
	.source = "skin://gfx/clock.png";
	.hqScaling = true;
      });
      widget(image, {
	.source = "skin://gfx/clock-hand-short.png";
	.angle = ($global.clock.hour % 12) * 30 + 
	  ($global.clock.minute) / 2;
      });
      widget(image, {
	.source = "skin://gfx/clock-hand-long.png";
	.angle = $global.clock.minute * 6;
      });
    }));


    commandGroup(widget(container_y, {
      .align = center;
      .width = $ui.size * 4;
      widget(label, {
	.align = center;
	.caption = strftime($global.clock.unixtime, "%B");
      });
      widget(label, {
	.align = center;
	.sizeScale = 2;
	.caption = strftime($global.clock.unixtime, "%d");
      });
    }));
  });

  space(1);

  widget(deck, {

    // -- playdeck ------------------------------------------------------
    commandGroup(widget(container_x, {
      .align = center;
      
      widget(container_y, {
	.spacing = 5;
	.align = center;
	widget(container_x, {
	  .spacing = 5;
	  .align = center;
	  .homogenous = true;
	  $view.playcontrollerswidth = getWidth();
	  
	  commandButton2(event(PreviousTrack), "SkipBack",
			 $global.media.current.canSkipBackward,
			 $global.media.current.canSkipBackward ||
			 $global.media.current.canSkipForward);

	  commandButton(event(SeekReverse), "SeekBack",
			$global.media.current.canSeek);
	  
	  widget(deck, {
	    .hidden = !$global.media.current.canPause;
	    .effect = flipVertical;
	    .noInitialTransform = true;
	    .time = 0.2;
	    
	    commandButton(event(Pause), "Pause", true);
	    commandButton(event(Play), "Play", true);
	    
	    .page = $global.media.current.playstatus == "pause";
	  });
	  
	  commandButton(event(SeekForward), "SeekForward",
			$global.media.current.canSeek);
	  commandButton2(event(NextTrack), "SkipNext",
			 $global.media.current.canSkipForward,
			 $global.media.current.canSkipBackward ||
			 $global.media.current.canSkipForward);
			 
	  
	  commandButton(event(Stop), "Stop", $global.media.current.canStop);
	  commandButton(event(Eject), "Eject", $global.media.current.canEject);

	  commandButton({ $view.settingpage = 3; }, "SeekByFrame",
			$global.media.current.seekindex.available);

	  commandToggle($global.media.current.repeat,
			"Repeat",
			$global.media.current.canRepeat);

	  commandToggle($global.media.current.shuffle,
			"Shuffle",
			$global.media.current.canShuffle);

	  commandButton({ $view.settingpage = 1; }, "Sound",
			$view.videofeatures);

	  commandButton({ $view.settingpage = 2; }, "Subtitles",
			$view.videofeatures);

	  commandButton({ $view.settingpage = 4; }, "Video",
			$view.videofeatures);

	  commandToggle($global.media.current.stats,
			"Info",
			$view.videofeatures);


	  commandButton({
	     $ui.menu = false;
	    fireEvent(navOpen("settings:"));
	  }, "Settings", true);
	});
	
	commandSeekSlider(
	  $global.media.current.currenttime,
	  $global.media.current.metadata.duration,
	  $global.media.current.canSeek,
	  $view.playcontrollerswidth,
	  !$global.media.current.canSeek
	);
      });

    }));


    // -- Audio config ------------------------------------------------------
    commandGroup(widget(container_y, {
      widget(label, {
	.caption = _("Audio settings");
	.sizeScale = 1.5;
      });

      .height = $ui.size * 10;
      .spacing = 5;

      commandTabGroup(
	commandTab($view.audiopage, _("Languages"), 0);
	commandTab($view.audiopage, _("Settings"), 1);
      );

      widget(deck, {

	// Page 0 - Languages
	widget(list_y, {
	  cloner($global.media.current.metadata.audiostreams, container_z, {
	    commandAudioTrack(join(" - ", $self.title, $self.language),
			      $self.longformat ?? $self.format,
			      $self.url == $global.media.current.audio.current,
			      selectAudioTrack($self.url));
	  });
	});

	// Page 1 - Settings
	widget(list_y, {
	  .spacing = 5;

	  cloner($global.media.current.audio.settings.model.nodes, loader, {
	    .source = "theme://settings/" + $self.model.type + ".view";
	    .time = 0.3;
	    .noInitialTransform = true;
	  });
	});
	
	.effect = slideHorizontal;
	.time = 0.2;
	.page = $view.audiopage;
      });
    }));

    // -- Subtitle tracks ------------------------------------------------------
    commandGroup(widget(container_y, {
      widget(label, {
	.caption = _("Subtitle settings");
	.sizeScale = 1.5;
      });

      .height = $ui.size * 10;
      .spacing = 5;

      commandTabGroup(
	commandTab($view.subtitlepage, _("Languages"), 0);
	commandTab($view.subtitlepage, _("Settings"), 1);
      );
      
      widget(deck, {

	// Page 0 - Languages
	widget(list_y, {
	  cloner($global.media.current.metadata.subtitlestreams, container_z, {
	    commandSubtitleTrack(join(" - ", $self.title, $self.language),
				 $self.format,
				 $self.source,
				 $self.url == $global.media.current.subtitle.current,
				 selectSubtitleTrack($self.url));
	  });
	});

	// Page 1 - Layout settings
	widget(list_y, {
	  .spacing = 5;

	  cloner($global.media.current.subtitle.settings.model.nodes, loader, {
	    .source = "theme://settings/" + $self.model.type + ".view";
	    .time = 0.3;
	    .noInitialTransform = true;
	  });
	});
	
	.effect = slideHorizontal;
	.time = 0.2;
	.page = $view.subtitlepage;
      });
    }));

    // -- Seek by items ------------------------------------------------------

    commandGroupFullWidth(widget(list_x, {
      .height = $ui.size * 8;
      .spacing = 5;
      cloner($global.media.current.seekindex.positions, backdrop, {
	.alphaSelf = 0.2 + (isFocused() || isHovered());
	.width = $ui.size * 7 * 16 / 9;
	.source = "skin://gfx/border.png";
	.borderOnly = true;
	.border = 12;
	.padding = -4;
	.focusable = 0.01;
	
	onEvent(activate, {
	  $global.media.current.currenttime = $self.timestamp;
	});
	
	widget(container_z, {
	  widget(image, {
	    .hqScaling = true;
	    .source = $self.image;
	  });

	  widget(container_y, {
	    .align = bottom;

	    widget(container_z, {
	      widget(gradient, {
		.color1 = 0;
		.color2 = 0.1;
		.alphaSelf = 0.75;
	      });
	    
	    
	      widget(label, {
		.align = center;
		.caption = value2duration($self.timestamp);
	      });
	    });
	  });
	});
      });
    }));


    // -- Video config ------------------------------------------------------
    commandGroup(widget(list_y, {
      .height = $ui.size * 8;
      .spacing = 5;

      widget(label, {
	.caption = _("Video settings");
	.sizeScale = 1.5;
      });

      cloner($global.media.current.video.settings.model.nodes, loader, {
	.source = "theme://settings/" + $self.model.type + ".view";
	.time = 0.3;
	.noInitialTransform = true;
      });
    }));

        
    //--- Deck control
    .page = select($view.videofeatures, $view.settingpage, 0);
    .effect = flipHorizontal;
    .time = 0.3;

  });
  widget(dummy, {
    .height = $ui.playdeckheight;
  });
});
