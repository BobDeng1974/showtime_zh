#import "skin://styles/style_list.view"


#define PLAYDECK_BUTTON(ICON, TITLE, EVENT, ENABLED, ROTATED = 0) {

  widget(container_z, {
    onEvent(activate, EVENT);
    focusable: ENABLED;

    widget(quad, {
      additive: true;
      alpha: 0.1 * isHovered() + 0.6 * isNavFocused();
    });
    widget(icon, {
      angle: iir(ROTATED, 4) * -90;
      size: 2em;
      source: ICON;
      color: select(isNavFocused(), 0, 1);
      alpha: 0.7 * iir(ENABLED, 8) + 0.3;
    });

    widget(displacement, {
      padding: [-4em, 0, -4em, -1em];
      widget(label, {
        alpha: iir(isNavFocused() || isHovered(), 4);
        align: bottom;
        shadow: true;
        zoffset: 10;
        caption: TITLE;
      });
    });
  });
}


style(OsdItem, {
  filterConstraintX: true;
  color: iir(!isNavFocused(), 4);
  shadow: iir(!isNavFocused(), 4);
});


delta($ui.fullwindow, isVisible());

$self.directClose = 1;
$self.close = $self.media.playstatus == "stop";
$clone.osdpage = 0;

onEvent(back, {
  $clone.showPlaydeck = 0;
}, $clone.showPlaydeck && !$clone.osdpage);

onEvent(back, {
  $clone.osdpage = 0;
}, $clone.osdpage);

//---------------------------
// Handle menu button
//---------------------------

onEvent(menu, {
  $clone.showPlaydeck = 1;
  focus("playdeck");
}, !$clone.showPlaydeck);

onEvent(menu, {
  $clone.osdpage = 1;
  focus("osd-menu-loader");
}, $clone.showPlaydeck);

onEvent(menu, {
  $clone.osdpage = 0;
  $clone.showPlaydeck = 0;
}, $clone.osdpage);



// Auto close playdeck after 10 seconds
/*
$clone.showPlaydeck ?=
  select(delay($clone.osdpage == 0 && $clone.showPlaydeck, 10, 0), 0, void);
*/

$view.showSeekBar =
  $ui.pointerVisible ||
  changed($self.media.seektime, 5, true) ||
  $clone.showPlaydeck ||
  $self.media.playstatus == "pause";


widget(container_z, {

  // --------------------------------------------
  // --- Primary video display
  // --------------------------------------------

  widget(layer, {
    widget(video, {
      zoffset: -500;
      primary: true;

      how: $self.how;
      model: $self.openedFrom;
      parentUrl: $self.parentUrl;
      origin: $self.origin;
      source: $self.source;

      focusable: 0.1;

      onEvent(left,  deliverEvent($self.media.eventSink, "SeekReverse"));
      onEvent(right, deliverEvent($self.media.eventSink, "SeekForward"));

      onEvent(up,    deliverEvent($self.media.eventSink, "VolumeUp"));
      onEvent(down,  deliverEvent($self.media.eventSink, "VolumeDown"));

      onEvent(activate, {
        toggle($clone.showPlaydeck);
      });

      bottomOverlayDisplacement: $clone.bottomOsdHeight;

    });


    widget(container_y, {

      hidden: !$clone.showPlaydeck;

      widget(container_x, {
        filterConstraintY: true;

        widget(dummy, {
          // A clickable zone that closes everything
          clickable: true;
          onEvent(activate, {
            $clone.showPlaydeck = 0;
            $clone.osdpage = 0;
          });
        });


        widget(displacement, {
          width: 22em;
          translation: [1 - iir($clone.osdpage > 0, 4), 0, 0];
          widget(container_z, {


            widget(layer, {

              widget(loader, {
                autohide: true;
                alpha: iir($clone.osdpage == 1, 4);
                source: select($clone.osdpage, "skin://osd/osd_main.view", "");
              });


              widget(loader, {
                autohide: true;
                source: translate($clone.osdpage, "",
                                  2, "skin://osd/osd_settings_subs.view",
                                  3, "skin://osd/osd_settings_audio.view",
                                  4, "skin://osd/osd_settings_video.view",
                                  100, "skin://osd/osd_subs.view",
                                  101, "skin://osd/osd_audio.view"
                                 );
              });
            });
            widget(quad, {
              zoffset: -100;
              color: 0;
              alpha: iir($clone.osdpage > 0, 4) * 0.9;
            });
          });
        });
      });

      // OSD buttons row

      widget(container_z, {
        height: 2.7em;
        delta($clone.bottomOsdHeight, isVisible() * getHeight());

        widget(quad, {
          alpha: 0.9;
          color: 0;
        });

        widget(container_x, {
          id: "playdeck";
          spacing: 1em;
          padding: [3.5em, 0.1em];

          PLAYDECK_BUTTON("skin://icons/ic_skip_previous_48px.svg",
                          _("Previous"),
                          event("PreviousTrack"),
                          $core.media.current.canSkipBackward);

          PLAYDECK_BUTTON(translate($core.media.current.playstatus,
                                    "skin://icons/ic_pause_48px.svg",
                                    "pause",
                                    "skin://icons/ic_play_arrow_48px.svg"),
                          _("Play/Pause"),
                          event("PlayPause"),
                          $core.media.current.canPause);

          PLAYDECK_BUTTON("skin://icons/ic_skip_next_48px.svg",
                          _("Next"),
                          event("NextTrack"),
                          $core.media.current.canSkipForward);

          widget(dummy, {
            width: 2em;
          });

          PLAYDECK_BUTTON("skin://icons/ic_subtitles_48px.svg",
                          _("Subtitles"),
                          {
                            $clone.osdpage = select($clone.osdpage == 100, 0, 100);
                            focus("osd_subs");
                          }, true);
          PLAYDECK_BUTTON("skin://icons/ic_speaker_48px.svg",
                          _("Audio tracks"),
                          {
                            $clone.osdpage = 101;
                            focus("osd_audio");
                          }, true);

          PLAYDECK_BUTTON("skin://icons/ic_menu_48px.svg",
                          _("Settings"),
                          {
                            toggle($clone.osdpage);
                            focus("osd_main");
                          }, true,
                          $clone.osdpage > 0 && $clone.osdpage < 100);

        });
      });
      widget(dummy, {
        height: 2em;
      });
    });
  });

  // Seekbar row

  widget(container_y, {
    hidden: !$view.showSeekBar;
    align: bottom;
    widget(container_z, {
      delta($clone.bottomOsdHeight, isVisible() * getHeight());
      height: 2em;
      widget(quad, {
        alpha: 0.9;
        color: 0;
      });

      widget(container_x, {
        spacing: 0.5em;
        padding: [1em, 0];

        widget(icon, {
          source: "skin://icons/ic_pause_48px.svg";
          alpha: iir(select($core.media.current.playstatus == "pause", 1, 0), 4);

        });
        widget(label, {
          width: 3em;
          caption: value2duration($self.media.currenttime);
          align: right;
        });

        widget(container_z, {
          widget(container_y, {
            align: center;
            widget(container_z, {
              height: 3;
              widget(container_y, {
                padding: 1;
                widget(quad, {
                  alpha: 0.3;
                  additive: true;
                });
              });
            });
          });

          widget(slider_x, {
            clickable: true;
            bind($self.media.currenttime);
            max: $self.media.metadata.duration;
            widget(icon, {
              source: "skin://icons/dot.png";
            });
            widget(container_y, {
              space(1);
              widget(quad, {
                height: 3;
                alpha: 0.9;
                additive: true;
              });
              space(1);
            });
          });
        });
        widget(label, {
          width: 4em;
          caption: value2duration($self.media.metadata.duration);
        });
      });
    });
  });


  widget(container_y, {
    hidden: $clone.osdpage > 0;
    padding: [$ui.xmargin, 2.5em];


    style(notifications, {
      shadow: true;
    });


    
    widget(container_x, {
      spacing: 0.5em;
      hidden: select($self.media.error, false, true);
      widget(icon, {
	source: "skin://icons/ic_error_48px.svg";
      });
      widget(label, {
	caption: $self.media.error;
        style: "notifications";
      });
    });

    widget(container_x, {
      spacing: 0.5em;
      hidden: select($self.media.video.too_slow, false, true);
      widget(icon, {
	source: "skin://icons/ic_error_48px.svg";
      });
      widget(label, {
	caption: _("CPU is too slow to decode this video");
        style: "notifications";
      });
    });


    cloner($self.media.notifications, container_x, {
      spacing: 0.5em;
      widget(icon, {
	source: "skin://icons/ic_error_48px.svg";
	color: translate($self.type, [1,1,1],
			 "info", [0.5, 1, 0.5],
			 "warning",  [1, 1, 0.5],
			 "error", [1, 0.5, 0.5]);
      });
      widget(label, {
	caption: $self.text;
        style: "notifications";
	color: translate($self.type, [1,1,1],
			 "info", [0.5, 1, 0.5],
			 "warning",  [1, 1, 0.5],
			 "error", [1, 0.5, 0.5]);
      });
    });


    widget(container_x, {
      spacing: 0.5em;
      hidden: !changed($self.media.audio.current, 5);
      widget(icon, {
        source: "dataroot://res/svg/Sound.svg";
      });
      widget(deck, {
        effect: flipHorizontal;
        time: 0.1;
        cloner($self.media.metadata.audiostreams, label, {
          style: "notifications";
	  caption: join(" - ", $self.title, $self.language,
                        $self.source, $self.longformat ?? $self.format);
        });
      });
    });

    widget(container_x, {
      hidden: !changed($self.media.ctrl.audiovolume, 2, true) || !$self.media.ctrl.audiovolume;
      spacing: 0.5em;
      widget(icon, {
      });
      widget(label, {
        style: "notifications";
        caption: fmt(_("Audio volume adjustment: %d dB"),
                     $self.media.ctrl.audiovolume);
      });
    });


    widget(container_x, {
      spacing: 0.5em;
      hidden: !changed($self.media.subtitle.current, 5);
      widget(icon, {
        source: "dataroot://res/svg/Script.svg";
      });
      widget(deck, {
        effect: flipHorizontal;
        time: 0.1;
        cloner($self.media.metadata.subtitlestreams, label, {
          style: "notifications";
	  caption: join(" - ", $self.title, $self.language, $self.source, $self.format);
        });
      });
    });
  });
});
