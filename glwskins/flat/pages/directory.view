
onEvent(videoInfo, {
  $clone.itemData <- $event;
  $clone.itemMenu = "video";
});

onEvent(pluginInfo, {
  $clone.itemData <- $event;
  $clone.itemMenu = "plugin";
});


onEvent(itemMenu, { $clone.itemMenu = void; }, $clone.itemMenu);
onEvent(back,     { $clone.itemMenu = void; }, $clone.itemMenu);
onEvent(cancel,   { $clone.itemMenu = void; }, $clone.itemMenu);

onEvent(ChangeView, deliverEvent($clone.settings.options, "Cycle"));

multiopt($view.path,
	 $clone.settings,
	 _("Page layout"),
	 $self.persistent.glwUserView,
	 // List of view follows
	 // First custom view set by model
	 makeUri(_("Custom"), $self.model.metadata.glwview),

	 // Optionally a list of custom views set by model
	 vectorize($self.model.metadata.glwviews),

	 // Then comes external views selected based on content
	 translate($self.model.contents, void,
		   "tracks",     vectorize($core.glw.views.standard.tracks),
		   "album",      vectorize($core.glw.views.standard.album),
		   "albums",     vectorize($core.glw.views.standard.albums),
		   "artist",     vectorize($core.glw.views.standard.artist),
		   "tvchannels", vectorize($core.glw.views.standard.tvchannels),
		   "images",     vectorize($core.glw.views.standard.images),
		   "movies",     vectorize($core.glw.views.standard.movies)
		    ),

	 // Then comes internal views selected based on content
	 translate($self.model.contents, void,
		   "album",      makeUri(_("Album"),      "album.view"),
		   "artist",     makeUri(_("Artist"),     "artist.view"),
		   "tvchannels", makeUri(_("Tvchannels"), "tvchannels.view"),
		   "images",     makeUri(_("Images"),     "images.view"),
		   "searchresults", makeUri(_("Search results"), "searchresults.view")
		    ),

	 select($self.model.contents == "images", 
		makeUri(_("Slideshow"), "slideshow.view"), void),

	 select($self.model.safeui, void,
		vectorize($core.glw.views.standard.directory)),
	 makeUri(_("List"), "list.view"),
	 makeUri(_("Grid"), "grid.view")
	);


widget(cursor, {

  widget(layer, {

    widget(container_x, {

      style: "PageContainer";

      widget(loader, {
        filterConstraintX: true;
        noInitialTransform: true;
        time: 0.05;
        source: $view.path;
      });
#import "skin://menu/sidebar.view"
    });

    widget(loader, {
      // Hide if itemMenu is 0 or if we shouldn't show it at all
      hidden: isVoid($clone.itemMenu);
      time: 0;
      noInitialTransform: true;
      source: "skin://ctxmenu/" + $clone.itemMenu + "_details.view";
      .args <- $clone.itemData;
    });
  });

  widget(quad, {
    zoffset: -100;
    alpha: 0.6 * iir($ui.keyboard, 4);
    additive: true;
  });

  widget(quad, {
    zoffset: -100;
    alpha: 0.1;
    additive: true;
  });
});
