
#define BTN(TITLE, EVENT) {
  widget(container_x, {
    align: center;
    widget(backdrop, {
      alpha: isFocused() + 0.5;
      source: "skin://graphics/border-tiny.png";
      border: 4;
      padding: [10, -1];
      widget(label, {
	focusable: true;
	caption: TITLE;
	onEvent(activate, deliverEvent($core.upgrade.eventSink, EVENT));
      });
    });
  });
}

#define BAR() {
  widget(container_x, {
    space(1);
    widget(container_y, {
      align: center;
      widget(container_z, {
	widget(backdrop, {
	  border: 4;
	  height: 8;
	  source: "skin://playdecks/duration-bar-bg.png";
	});
	widget(clip, {
	  clipping: [-1, 0, 1 - $core.upgrade.progress, 0];
	  widget(backdrop, {
	    margin: [-8, -3, -8, -5];
	    border: [16, 8];
	    source: "skin://playdecks/duration-bar-colorized.png";
	  });
	});
      });
    });
    space(1);
  });
}




widget(container_y, {
  
  padding: [$ui.size/2,$ui.size,$ui.size/2,0];


  widget(container_x, {
    spacing: $ui.size;
    widget(label, {
      filterConstraintX: true;
      caption: _("Current version:");
      color: 0.8;
      sizeScale: 1.5;
      align: right;
    });

    widget(label, {
      filterConstraintX: true;
      caption: $core.app.version;
      sizeScale: 1.5;
    });
  });
    
  widget(container_x, {
    spacing: $ui.size;
    widget(label, {
      filterConstraintX: true;
      caption: _("Available version:");
      color: 0.8;
      sizeScale: 1.5;
      align: right;
    });

    widget(label, {
      filterConstraintX: true;
      caption: select($core.upgrade.availableVersion,
		      $core.upgrade.availableVersion,
		      _("No upgrade available"));
      sizeScale: 1.5;
    });
  });


  widget(deck, {
    filterConstraintY: true;

    widget(label, {
      id: "checking";
      caption: _("Checking for updates...");
      align: center;
    });

    widget(container_y, {
      id: "canUpgrade";
      spacing: $ui.size;
      align: center;
      widget(label, {
	caption: fmt(_("New version %s is available for download"),
		     $core.upgrade.availableVersion);
	align: center;
	sizeScale: 1.5;
      });
      BTN(_("Download and install..."), "install");
    });


    widget(container_y, {
      id: "upgradeError";
      spacing: $ui.size;
      align: center;
      widget(label, {
	caption: fmt(_("An error occured during download"));
	align: center;
	sizeScale: 1.5;
      });
      widget(label, {
	caption: $core.upgrade.error;
	align: center;
	sizeScale: 1.5;
      });
      BTN(_("Retry..."), "install");
    });


    widget(container_y, {
      id: "checkError";
      spacing: $ui.size;
      align: center;
      widget(label, {
	caption: fmt(_("Unable to query for new version"));
	align: center;
	sizeScale: 1.5;
      });
      widget(label, {
	caption: $core.upgrade.error;
	align: center;
	sizeScale: 1.5;
      });
      BTN(_("Retry..."), "checkUpdates");
    });


    widget(container_y, {
      id: "upToDate";
      spacing: $ui.size;
      align: center;
      widget(label, {
	caption: fmt(_("%s is up to date"), $core.app.name);
	align: center;
	sizeScale: 1.5;
      });
      BTN(_("Check for updates now"), "checkUpdates");
    });

    widget(container_y, {
      id: "download";
      align: center;

      widget(label, {
	caption: fmt(_("Downloading %s"), $core.upgrade.task);
	align: center;
      });
      BAR();
    });

    widget(container_y, {
      id: "countdown";
      align: center;

      widget(label, {
	caption: fmt(_("Restarting %s in %d seconds..."),
		     $core.app.name, $core.upgrade.countdown);
	align: center;
      });
    });

    widget(container_y, {
      id: "prepare";
      align: center;

      widget(label, {
	caption: fmt(_("Checking installed version of %s"),
		       $core.upgrade.task);
	align: center;
      });
    });

    widget(container_y, {
      id: "patch";
      align: center;

      widget(label, {
	caption: fmt(_("Patching %s"), $core.upgrade.task);
	align: center;
      });
    });


    page: $core.upgrade.status;
  });


  widget(label, {
    caption: fmt(_("Changelog for %s releases"),
		 translate($core.upgrade.track, $core.upgrade.track,
			   "testing", _("Testing"),
			   "stable", _("Stable")));
    align: center;
  });

  widget(quad, {
    height: 1;
  });

  widget(container_x, {
    weight: 2;
    widget(list_y, {
      id: "list";
      spacing: $ui.size;

      cloner($core.upgrade.changelog, container_x, {
	spacing: $ui.size;
	focusable: 0.1;
	alpha: isFocused() + 0.6;

	widget(label, {
	  weight: 0.4;
	  filterConstraintX: true;
	  align: topRight;
	  caption: $self.version;
	  sizeScale: 1.5;
	});

	widget(label, {
	  filterConstraintX: true;
	  maxlines: 10;
	  caption: $self.text;
	});
      });
    });

    widget(slider_y, {
      bind("list");
      width: 4;
      focusable: canScroll() * 0.01;
      alpha: iir(canScroll(), 16);
      widget(quad, {
	alpha: iir(0.3 + 0.3 * (isFocused() || isPressed()), 4) + isHovered();
      });
    });
  });
});
