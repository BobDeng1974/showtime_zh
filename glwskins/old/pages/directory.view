

// Item menu event routing
onEvent(itemMenu, { $clone.itemMenu = !$clone.itemMenu; }, !$clone.pageMenu);
onEvent(back,     { $clone.itemMenu = false; }, $clone.itemMenu);
onEvent(cancel,   { $clone.itemMenu = false; }, $clone.itemMenu);


onEvent(ChangeView, deliverEvent($clone.settings.options, "Cycle"));

multiopt($view.path,
	 $clone.settings,
	 _("View"),
	 $self.persistent.glwUserView,
	 // List of view follows
	 // First custom view set by model
	 makeUri(_("Custom"), $self.model.metadata.glwview),

	 // Optionally a list of custom views set by model
	 vectorize($self.model.metadata.glwviews),

	 // Then comes external views selected based on content
	 translate($self.model.contents, void,
		   "tracks",     vectorize($core.glw.views.standard.tracks),
		   "album",      vectorize($core.glw.views.standard.album),
		   "albums",     vectorize($core.glw.views.standard.albums),
		   "artist",     vectorize($core.glw.views.standard.artist),
		   "tvchannels", vectorize($core.glw.views.standard.tvchannels),
		   "images",     vectorize($core.glw.views.standard.images),
		   "movies",     vectorize($core.glw.views.standard.movies)
		    ),

	 // Then comes internal views selected based on content
	 translate($self.model.contents, void,
		   "album",      makeUri(_("Album"),      "album.view"),
		   "artist",     makeUri(_("Artist"),     "artist.view"),
		   "tvchannels", makeUri(_("Tvchannels"), "tvchannels.view"),
		   "images",     makeUri(_("Images"),     "images.view")
		    ),

	 select($self.model.contents == "images", 
		makeUri(_("Slideshow"), "slideshow.view"), void),

	 select($self.model.safeui, void,
		vectorize($core.glw.views.standard.directory)),
	 makeUri(_("List"), "list.view")
	);

widget(layer, {

  widget(loader, {
    noInitialTransform: true;
    effect: blend;
    time: 0.2;
    source: $view.path;
  });

  widget(loader, {
    hidden: !$clone.itemMenu;
    time: 0;
    noInitialTransform: true;
    source: select($clone.itemMenu, "skin://cmdmenu/cmdmenu_item.view", "");
    .args <- $clone.focused;
  });
});

