#import "skin://common.view"

#define actionBtn(ICON, EVENT, ENABLED) {

  widget(container_y, {
    
    focusable: ENABLED;
    alpha: select(ENABLED, 1, 0.3);
    onEvent(activate, EVENT);

    widget(backdrop, {
      alpha: isFocused() + 0.6;
      
      color: iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
      SquareButtonBack();
      
      widget(frontdrop, {
	SquareButtonFront();
	widget(icon, {
	  source: ICON;
	  sizeScale: 2;
	});
      });
    });
  });
}


#define toggleBtn(ICON, STATE, ENABLED) {

  widget(container_y, {
    
    focusable: ENABLED;
    alpha: select(ENABLED, 1, 0.3);
    onEvent(activate, { (STATE) = !STATE; });

    widget(backdrop, {
      alpha: isFocused() + 0.6;
      
      color: iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
      SquareButtonBack();
      
      widget(frontdrop, {
	SquareButtonFront();
	widget(icon, {
	  source: ICON;
	  sizeScale: 2;
	  color: select(STATE, 1, 0.4*[0.431, 0.811, 1]);
	});
      });
    });
  });
}

widget(container_y, {
  padding: [$ui.size, $ui.size, $ui.size, $ui.size + $ui.playdeckheight];
  filterConstraintX: true;
  filterConstraintY: true;
  

  widget(container_x, {
    spacing: $ui.size;

    widget(frontdrop, {
      source: "skin://graphics/boxart-overlay.png";
      border: 8;
      
      widget(icon, {
	source: $core.media.current.metadata.album_art;
	sizeScale: 8;
      });
    });

    widget(container_y, {
      filterConstraintX: true;
      widget(label, {
	caption: $core.media.current.metadata.title;
	TextStyleItem();
	sizeScale: 2;
      });
      widget(label, {
	caption: $core.media.current.metadata.artist;
	TextStyleItem();
      });
      widget(label, {
	caption: $core.media.current.metadata.album;
	TextStyleItem();
      });
      widget(label, {
	caption: $core.media.current.metadata.year;
	TextStyleItem();
      });

      widget(label, {
	TextStyleItem();
	caption: fmt(_("Track %d / %d"),
		     $core.media.current.currentTrack,
		     $core.media.current.totalTracks);
      });

    });
  });

  VerticalSeparator();



  widget(container_x, {
    filterConstraintY: true;
    
    spacing: $ui.size;

    widget(container_y, {
      
      widget(container_x, {
	align: center;
	actionBtn("dataroot://res/svg/SkipBack.svg", event(PreviousTrack),
		  $core.media.current.canSkipBackward);
	actionBtn("dataroot://res/svg/Play.svg", event(PlayPause), true);
	actionBtn("dataroot://res/svg/SkipNext.svg", event(NextTrack),
		  $core.media.current.canSkipForward);
      });

      widget(container_x, {
	align: center;
	toggleBtn("dataroot://res/svg/Repeat.svg",
		  $core.media.current.repeat,
		  $core.media.current.canRepeat);

	toggleBtn("dataroot://res/svg/Shuffle.svg",
		  $core.media.current.shuffle,
		  $core.media.current.canShuffle);
      });
    });

    widget(backdrop, {
      filterConstraintX: true;
      source: "skin://graphics/indent.png";
      border: 16;
      
      widget(container_x, {
	widget(list_y, {
          navWrap: true;
	  id: "list";
	  spacing: 3;
	  
	  cloner($core.playqueue.nodes, loader, {
	    time: 0.1;
	    effect: blend;
	    source: "listitems/audio.view";
	  });
	});
	
	widget(slider_y, {
	  bind("list");
	  width: 4;
	  focusable: canScroll();
	  alpha: iir(canScroll(), 16);
	  
	  widget(quad, {
	    alpha: iir(0.3 + 0.3 * (isFocused() || isPressed()), 4) + isHovered();
	  });
	});
      });
    });
  });
});
